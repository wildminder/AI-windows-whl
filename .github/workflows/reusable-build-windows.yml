# This file defines the reusable steps for building one Windows wheel.
# It is not triggered directly by commits, but is CALLED by other workflows.
name: Reusable Windows Build

# 'workflow_call' makes this workflow reusable.
on:
  workflow_call:
    # Define the parameters (inputs) this workflow expects to receive.
    inputs:
      flash-attn-version:
        description: "The version of flash-attention to check out and build."
        required: true
        type: string
      python-version:
        description: "The Python version for the build environment."
        required: true
        type: string
      torch-version:
        description: "The PyTorch version to install."
        required: true
        type: string
      cuda-version-full:
        description: "The full CUDA version for the toolkit (e.g., 13.0.0)."
        required: true
        type: string
      cuda-version-short:
        description: "The short CUDA version for the build script (e.g., 13.0)."
        required: true
        type: string
      tag-name:
        description: "The git tag to upload the asset to."
        required: true
        type: string

jobs:
  build_job:
    name: Build Win (Py ${{ inputs.python-version }}, Torch ${{ inputs.torch-version }}, CUDA ${{ inputs.cuda-version-short }})
    runs-on: windows-2022

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Python ${{ inputs.python-version }}
        uses: actions/setup-python@v5
        with:
          python-version: ${{ inputs.python-version }}

      - name: Install CUDA Toolkit
        uses: Jimver/cuda-toolkit@v0.2.24
        with:
          cuda: ${{ inputs.cuda-version-full }}

      - name: Install Visual Studio Build Tools
        shell: pwsh
        run: |
          choco upgrade -y visualstudio2022buildtools `
            --params "--add Microsoft.VisualStudio.Component.VC.Tools.x86.x64"

      - name: Install build dependencies
        shell: pwsh
        run: python -m pip install -U setuptools wheel packaging ninja

      - name: Build and Rename wheel
        id: build_wheel
        shell: pwsh
        run: |
          .\build_windows.ps1 -FlashAttnVersion "${{ inputs.flash-attn-version }}" `
                              -PythonVersion "${{ inputs.python-version }}" `
                              -TorchVersion "${{ inputs.torch-version }}" `
                              -CudaVersion "${{ inputs.cuda-version-short }}"
          
          $wheelName = Get-ChildItem -Path "flash-attention\dist\*.whl" | Select-Object -First 1 | ForEach-Object { $_.Name }
          echo "WHEEL_NAME=$wheelName" >> $env:GITHUB_OUTPUT

      - name: Test wheel installation
        shell: pwsh
        run: |
          pip install --no-cache-dir flash-attention/dist/${{ steps.build_wheel.outputs.WHEEL_NAME }}
          python -c "import flash_attn; print('Successfully imported flash_attn version:', flash_attn.__version__)"

      - name: Upload Asset to Release
        # This step runs inside the reusable workflow.
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        shell: pwsh
        run: |
          $tagName = "${{ inputs.tag-name }}"
          $wheelPath = "flash-attention/dist/${{ steps.build_wheel.outputs.WHEEL_NAME }}"
          gh release upload $tagName $wheelPath --clobber
          Write-Host "Uploaded $wheelPath to Release $tagName"
