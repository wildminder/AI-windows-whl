name: Build xformers Windows Wheel

# This action is triggered manually from the Actions tab.
on:
  workflow_dispatch:
    inputs:
      python_version:
        description: 'Python version to use'
        required: true
        type: string
        default: '3.13'
      cuda_short_version:
        description: 'CUDA version for PyTorch wheel index (e.g., 130)'
        required: true
        type: choice
        options:
        - '130'
        - '128'
        - '126'
        default: '130'
      torch_version:
        description: 'PyTorch version (e.g., 2.3.1). Leave empty to use the latest.'
        required: false
        type: string
        default: ''
      is_nightly:
        description: 'Set to "true" to install a nightly build of PyTorch (if torch_version is empty)'
        required: true
        type: boolean
        default: false
      torch_cuda_arch_list:
        description: 'CUDA architectures (e.g., "8.0 9.0a"). Leave empty for smart default.'
        required: false
        type: string
        default: ''

jobs:
  build_wheel:
    runs-on: windows-latest
    defaults:
      run:
        shell: bash

    env:
      TMPDIR: "./x" # Workaround for long path issues on Windows

    steps:
      - name: 'Workaround: Enable long paths for git'
        run: git config --system core.longpaths true

      - name: 'Workaround: Create local TMPDIR for long paths'
        run: mkdir x

      - name: 'Checkout xformers repository'
        uses: actions/checkout@v4
        with:
          repository: 'johnnynunez/xformers'
          submodules: recursive
          fetch-depth: 0 # Full history is needed for version calculation

      - name: 'Set up Python'
        uses: actions/setup-python@v5
        with:
          python-version: ${{ inputs.python_version }}

      - name: 'Map Short CUDA Version to Full Version'
        id: map_cuda_version
        run: |
          SHORT_VERSION=${{ inputs.cuda_short_version }}
          FULL_VERSION=""
          case $SHORT_VERSION in
            130)
              FULL_VERSION="13.0.1"
              ;;
            129)
              FULL_VERSION="12.9.0"
              ;;
            128)
              FULL_VERSION="12.8.1"
              ;;
            *)
              echo "::error::Unsupported CUDA version: $SHORT_VERSION"
              exit 1
              ;;
          esac
          echo "Mapped CUDA version $SHORT_VERSION to $FULL_VERSION"
          echo "FULL_CUDA_VERSION=$FULL_VERSION" >> $GITHUB_ENV

      - name: 'Set up CUDA Toolkit'
        uses: N-Storm/cuda-toolkit@v0.2.28
        with:
          cuda: ${{ env.FULL_CUDA_VERSION }}
          method: 'network'
          use-github-cache: false

      - name: 'Set up MSVC developer command prompt'
        uses: ilammy/msvc-dev-cmd@v1
        with:
          arch: x64

      - name: 'Workaround: Remove git bash link.exe to prevent conflict with MSVC'
        run: rm -f /usr/bin/link.exe

      - name: 'Workaround: HACKFIX for cutlass compiler bug'
        run: |
          rm -f third_party/cutlass/include/cutlass/gemm/kernel/sm90_gemm_tma_warpspecialized_pingpong.hpp
          touch third_party/cutlass/include/cutlass/gemm/kernel/sm90_gemm_tma_warpspecialized_pingpong.hpp

      - name: 'Determine SM Architectures'
        id: set_arch_list
        run: |
          if [[ -n "${{ inputs.torch_cuda_arch_list }}" ]]; then
            echo "Using user-provided SM architecture list: ${{ inputs.torch_cuda_arch_list }}"
            echo "SM_ARCH_LIST=${{ inputs.torch_cuda_arch_list }}" >> $GITHUB_ENV
            exit 0
          fi
          
          echo "Calculating smart default SM arch list..."
          CUDA_INT_VERSION=${{ inputs.cuda_short_version }}
          
          CALCULATED_ARCHS=""
          if (( CUDA_INT_VERSION >= 130 )); then
            CALCULATED_ARCHS="8.0 8.6 9.0 10.0f 11.0f 12.0f"
          elif (( CUDA_INT_VERSION >= 128 )); then
            CALCULATED_ARCHS="8.0 8.6 9.0 10.0 12.0"
          elif (( CUDA_INT_VERSION >= 118 )); then
            CALCULATED_ARCHS="8.0 8.6 9.0"
          else
            CALCULATED_ARCHS="8.0 8.6"
          fi
          
          echo "Calculated SM architecture list: ${CALCULATED_ARCHS}"
          echo "SM_ARCH_LIST=${CALCULATED_ARCHS}" >> $GITHUB_ENV

      - name: 'Install PyTorch and dependencies'
        run: |
          python -m pip install --upgrade pip wheel setuptools ninja
          
          if [[ "${{ inputs.is_nightly }}" == "true" ]]; then
            echo "Installing LATEST NIGHTLY PyTorch build for cu${{ inputs.cuda_short_version }}..."
            python -m pip install --pre torch torchvision --index-url https://download.pytorch.org/whl/nightly/cu${{ inputs.cuda_short_version }}
          elif [[ -z "${{ inputs.torch_version }}" ]]; then
            echo "Installing LATEST STABLE PyTorch build for cu${{ inputs.cuda_short_version }}..."
            python -m pip install torch torchvision --index-url https://download.pytorch.org/whl/cu${{ inputs.cuda_short_version }}
          else
            echo "Installing SPECIFIC STABLE PyTorch version: ${{ inputs.torch_version }} for cu${{ inputs.cuda_short_version }}"
            python -m pip install torch==${{ inputs.torch_version }} torchvision --index-url https://download.pytorch.org/whl/cu${{ inputs.cuda_short_version }}
          fi
          
          python -m pip install -r requirements.txt
          
          echo "--- Verifying PyTorch installation ---"
          python -c "import torch; print(f'Successfully installed torch {torch.__version__}')"
      
      - name: 'Build xformers wheel'
        env:
          DISTUTILS_USE_SDK: 1
          FORCE_CUDA: 1
          MAX_JOBS: 4
          TORCH_CUDA_ARCH_LIST: ${{ env.SM_ARCH_LIST }}
          XFORMERS_BUILD_TYPE: "Release"
        run: |
          echo "Building with TORCH_CUDA_ARCH_LIST='${{ env.SM_ARCH_LIST }}'"
          python setup.py bdist_wheel
          
      - name: 'Upload wheel artifact'
        uses: actions/upload-artifact@v4
        with:
          name: xformers-wheel-windows-py${{ inputs.python_version }}-cu${{ inputs.cuda_short_version }}
          path: dist/*.whl